package unisales;

import robocode.*;
import robocode.util.Utils;
import java.awt.*;
import java.awt.geom.*;

public class SuperCrazy extends AdvancedRobot {

	public int sameDirectionCounter = 0;
	public long moveTime = 1;
	public static int moveDirection = 1;
	public static double lastBulletSpeed = 15.0;
	public double wallStick = 120;

	public void run() {
		setBodyColor(new Color((float)Math.random(),(float)Math.random(),(float)Math.random()));
		setGunColor(new Color((float)Math.random(),(float)Math.random(),(float)Math.random()));
		setRadarColor(new Color((float)Math.random(),(float)Math.random(),(float)Math.random()));
		setBulletColor(new Color((float)Math.random(),(float)Math.random(),(float)Math.random()));
		setScanColor(new Color((float)Math.random(),(float)Math.random(),(float)Math.random()));
		
		setAdjustGunForRobotTurn(true);
		setAdjustRadarForGunTurn(true);
		
		while (true) {
			if (getRadarTurnRemaining() == 0.0)
		            	setTurnRadarRightRadians(Double.POSITIVE_INFINITY);
	        	execute();
		}
	}
	
		if(e.getTime() % 32 == 0) {
			
			setBodyColor(new Color((float)Math.random(),(float)Math.random(),(float)Math.random()));
			setGunColor(new Color((float)Math.random(),(float)Math.random(),(float)Math.random()));
			setRadarColor(new Color((float)Math.random(),(float)Math.random(),(float)Math.random()));
			setBulletColor(new Color((float)Math.random(),(float)Math.random(),(float)Math.random()));
			setScanColor(new Color((float)Math.random(),(float)Math.random(),(float)Math.random()));

			
			wallStick = 120 + Math.random()*40;
		}
		
		
		double absBearing = e.getBearingRadians() + getHeadingRadians();
		double distance = e.getDistance() + (Math.random()-0.5)*5.0;

		
	    	double radarTurn = Utils.normalRelativeAngle(absBearing
			- getRadarHeadingRadians() );

		double baseScanSpan = (18.0 + 36.0*Math.random());
		double extraTurn = Math.min(Math.atan(baseScanSpan / distance), Math.PI/4.0);
			setTurnRadarRightRadians(radarTurn + (radarTurn < 0 ? -extraTurn : extraTurn));
		
		
		if(--moveTime <= 0) {
			distance = Math.max(distance, 100 + Math.random()*50) * 1.25;
			moveTime = 50 + (long)(distance / lastBulletSpeed);
			
			++sameDirectionCounter;

			
			if(Math.random() < 0.5 || sameDirectionCounter > 16) {
				moveDirection = -moveDirection;
				sameDirectionCounter = 0;
			}
		}
		
		
		
		double goalDirection = absBearing-Math.PI/2.0*moveDirection;
			
		goalDirection += (Math.random()-0.5) * (Math.random()*2.0 + 1.0);
		
		
		double x = getX();
		double y = getY();
		double smooth = 0;

		
		Rectangle2D fieldRect = new Rectangle2D.Double(18, 18, getBattleFieldWidth()-36, getBattleFieldHeight()-36);

		while (!fieldRect.contains(x+Math.sin(goalDirection)*wallStick, y+ Math.cos(goalDirection)*wallStick)) {
			/* turn a little toward enemy and try again */
			goalDirection += moveDirection*0.1;
			smooth += 0.1;
		}
	
		
		if(smooth > 0.5 + Math.random()*0.125) {
			moveDirection = -moveDirection;
			sameDirectionCounter = 0;
		}
	
		double turn = Utils.normalRelativeAngle(goalDirection - getHeadingRadians());
		
		
		if (Math.abs(turn) > Math.PI/2) {
			turn = Utils.normalRelativeAngle(turn + Math.PI);
			setBack(100);
		} else {
			setAhead(100);
		}
	
		setTurnRightRadians(turn);
		
		
		
		double bulletPower = 1.0 + Math.random()*2.0;
		double bulletSpeed = 20 - 3 * bulletPower;
		
		
		double enemyLatVel = e.getVelocity()*Math.sin(e.getHeadingRadians() - absBearing);
		double escapeAngle = Math.asin(8.0 / bulletSpeed);

		
		double enemyDirection = Math.signum(enemyLatVel);
		double angleOffset = escapeAngle * enemyDirection * Math.random();
		setTurnGunRightRadians(Utils.normalRelativeAngle(absBearing + angleOffset - getGunHeadingRadians()));
	
		
		if(getEnergy() > bulletPower) {
			setFire(bulletPower);
		}
	}


	public void onHitByBullet(HitByBulletEvent e) {
		lastBulletSpeed = e.getVelocity();
	}
}
